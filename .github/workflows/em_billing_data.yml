name: Process EM Users in Parallel

on:
  workflow_dispatch:
    inputs:
      s3_path:
        description: "S3 folder path to upload results (e.g. s3://bucket/folder/)"
        required: true
        default: "s3://bidgely-adhoc-productqa/ReCreatingProdData/BalaKrishna/EM/"

jobs:
  process-users:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        batch: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Calculate Batch Range
        id: calc
        run: |
          TOTAL=$(wc -l < split.txt)
          JOBS=20
          SIZE=$(( (TOTAL + JOBS - 1) / JOBS ))+1

          INDEX=${{ matrix.batch }}
          START=$(( INDEX * SIZE + 1 ))
          END=$(( (INDEX + 1) * SIZE ))
          if [ $END -gt $TOTAL ]; then END=$TOTAL; fi

          echo "found $TOTAL users in the file"
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END" >> $GITHUB_OUTPUT

      - name: Run batch
        run: |
          echo "Processing lines ${{ steps.calc.outputs.start }} to ${{ steps.calc.outputs.end }}..."
          python em_billingdata.py \
            --input split.txt \
            --start ${{ steps.calc.outputs.start }} \
            --end ${{ steps.calc.outputs.end }} \
            --output output_${{ matrix.batch }}.csv

      - name: Upload CSV artifacts
        uses: actions/upload-artifact@v4
        with:
          name: results-batch-${{ matrix.batch }}
          path: output_${{ matrix.batch }}.csv

      - name: Upload Failed Users artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failed-batch-${{ matrix.batch }}
          path: output_${{ matrix.batch }}_failed.csv

  merge-results:
    runs-on: ubuntu-latest
    needs: process-users
    if: ${{ always() }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all batch artifacts
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Merge Success CSVs
        run: |
          mkdir -p merged
          echo "Merging success results..."
          success_files=$(find results -type f -path "*/results-batch-*/output_*.csv" | sort)
          if [ -n "$success_files" ]; then
            head -n 1 $(echo $success_files | awk '{print $1}') > merged/success.csv
            for f in $success_files; do
              tail -n +2 "$f" >> merged/success.csv
              echo "Merging $f"
            done
            echo "‚úÖ Merged success CSV written to merged/success.csv"
          else
            echo "‚ö†Ô∏è No success files found"
          fi

      - name: Merge Failed CSVs
        run: |
          mkdir -p merged
          echo "Merging failed results..."
          failed_files=$(find results -type f -path "*/failed-batch-*/output_*_failed.csv" | sort)
          if [ -n "$failed_files" ]; then
            head -n 1 $(echo $failed_files | awk '{print $1}') > merged/failed.csv
            for f in $failed_files; do
              tail -n +2 "$f" >> merged/failed.csv
              echo "Merging $f"
            done
            echo "‚ùå Merged failed CSV written to merged/failed.csv"
          else
            echo "üéâ No failed files found"
          fi

      - name: Prepare Email Body
        id: email_body
        run: |
          SUCCESS_PATH="${{ github.event.inputs.s3_path }}success.csv"
          FAILED_PATH="${{ github.event.inputs.s3_path }}failed.csv"
          BODY="<p>‚úÖ Success CSV: <a href='$SUCCESS_PATH'>$SUCCESS_PATH</a></p>"
          BODY="$BODY<p>‚ùå Failed CSV: <a href='$FAILED_PATH'>$FAILED_PATH</a></p>"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Upload results to S3
        run: |
          echo "Uploading to ${{ github.event.inputs.s3_path }}"
          aws s3 cp merged/success.csv ${{ github.event.inputs.s3_path }}success.csv
          aws s3 cp merged/failed.csv ${{ github.event.inputs.s3_path }}failed.csv

      - name: Send email with S3 links
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 'User Processing Report - ${{ github.run_number }}'
          html_body: |
            <h4>The user processing script has completed ‚úÖ</h4>
            ${{ steps.email_body.outputs.body }}
            <br>
            Run Number: ${{ github.run_number }}<br>
            Repository: ${{ github.repository }}
          to: balakrishnam@bidgely.com
          from: GitHub Actions <actions@github.com>

      - name: Delete all intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        if: ${{ always() }}
        with:
          name: |
            results-batch-*
            failed-batch-*